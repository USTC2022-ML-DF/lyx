# 直接 bert-base加载 roberta
# 最终特征采用 last 4 mean pooling，即取bert最后四层的特征平均池化
# 最终再接一个映射到36的分类头，即分36类
# loss部分即传统交叉熵，后续也可考虑focal loss 等
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from transformers import BertForMaskedLM


 
# 支持多分类和二分类
class FocalLoss(nn.Module):
    """
    This is a implementation of Focal Loss with smooth label cross entropy supported which is proposed in
    'Focal Loss for Dense Object Detection. (https://arxiv.org/abs/1708.02002)'
        Focal_Loss= -1*alpha*(1-pt)^gamma*log(pt)
    :param num_class:
    :param alpha: (tensor) 3D or 4D the scalar factor for this criterion
    :param gamma: (float,double) gamma > 0 reduces the relative loss for well-classified examples (p>0.5) putting more
                    focus on hard misclassified example
    :param smooth: (float,double) smooth value when cross entropy
    :param balance_index: (int) balance class index, should be specific when alpha is float
    :param size_average: (bool, optional) By default, the losses are averaged over each loss element in the batch.
    """
 
    def __init__(self, num_class, alpha=None, gamma=2, balance_index=-1, smooth=None, size_average=True):
        super(FocalLoss, self).__init__()
        self.num_class = num_class
        self.alpha = alpha
        self.gamma = gamma
        self.smooth = smooth
        self.size_average = size_average
 
        if self.alpha is None:
            self.alpha = torch.ones(self.num_class, 1)
        elif isinstance(self.alpha, (list, np.ndarray)):
            assert len(self.alpha) == self.num_class
            self.alpha = torch.FloatTensor(alpha).view(self.num_class, 1)
            self.alpha = self.alpha / self.alpha.sum()
        elif isinstance(self.alpha, float):
            alpha = torch.ones(self.num_class, 1)
            alpha = alpha * (1 - self.alpha)
            alpha[balance_index] = self.alpha
            self.alpha = alpha
        else:
            raise TypeError('Not support alpha type')
 
        if self.smooth is not None:
            if self.smooth < 0 or self.smooth > 1.0:
                raise ValueError('smooth value should be in [0,1]')
 
    def forward(self, input, target):
        logit = F.softmax(input, dim=1)
 
        if logit.dim() > 2:
            # N,C,d1,d2 -> N,C,m (m=d1*d2*...)
            logit = logit.view(logit.size(0), logit.size(1), -1)
            logit = logit.permute(0, 2, 1).contiguous()
            logit = logit.view(-1, logit.size(-1))
        target = target.view(-1, 1)
 
        # N = input.size(0)
        # alpha = torch.ones(N, self.num_class)
        # alpha = alpha * (1 - self.alpha)
        # alpha = alpha.scatter_(1, target.long(), self.alpha)
        epsilon = 1e-10
        alpha = self.alpha
        if alpha.device != input.device:
            alpha = alpha.to(input.device)
 
        idx = target.cpu().long()
        one_hot_key = torch.FloatTensor(target.size(0), self.num_class).zero_()
        one_hot_key = one_hot_key.scatter_(1, idx, 1)
        if one_hot_key.device != logit.device:
            one_hot_key = one_hot_key.to(logit.device)
 
        if self.smooth:
            one_hot_key = torch.clamp(
                one_hot_key, self.smooth, 1.0 - self.smooth)
        pt = (one_hot_key * logit).sum(1) + epsilon
        logpt = pt.log()
 
        gamma = self.gamma
 
        alpha = alpha[idx]
        loss = -1 * alpha * torch.pow((1 - pt), gamma) * logpt
 
        if self.size_average:
            loss = loss.mean()
        else:
            loss = loss.sum()
        return loss
 


class BottleNeck(nn.Module):
    def __init__(self, in_dim, ffn_dim=None, out_dim=None, mlp_layers=2):
        super().__init__()
        ffn_dim = ffn_dim if ffn_dim is not None else in_dim * 4
        out_dim = out_dim if out_dim is not None else in_dim

        self.mlps = nn.ModuleList()
        self.mlps.append(nn.Linear(in_dim, ffn_dim))
        for _ in range(mlp_layers - 2):
            self.mlps.append(nn.Linear(ffn_dim, ffn_dim))
        self.mlps.append(nn.Linear(ffn_dim, out_dim))

        self.bns = nn.ModuleList()
        for _ in range(mlp_layers - 1):
            self.bns.append(nn.LayerNorm(ffn_dim))

        self.num_layers = mlp_layers

    def forward(self, x):
        for i in range(self.num_layers - 1):
            x = self.mlps[i](x)
            x = self.bns[i](x)
            x = F.relu(x)
        x = self.mlps[-1](x)
        return x


class clsModel(nn.Module):
    def __init__(self, args):
        super(clsModel, self).__init__()
        self.bert_lm = BertForMaskedLM.from_pretrained(args.bert_dir, output_hidden_states=True)
        self.cls_privilege = nn.Linear(768 * 4, 4)
        self.cls_attack_vec = nn.Linear(768 * 4 ,2)
        self.cls_impact = BottleNeck(768 * 4, ffn_dim=768, out_dim=13, mlp_layers=3)
        #self.text_embedding = self.bert_lm.bert.embeddings

        self.rdrop = args.rdrop
        self.rdrop_alpha = args.rdrop_alpha
        self.focalloss = args.focalloss

    def build_pre_input(self, data):
        text_inputs = data['text_inputs'].cuda()
        text_mask = data['attention_mask'].cuda()
        text_type_ids = data['token_type_ids'].cuda()
        input_ids = data['input_ids'].cuda()
        return text_inputs, text_mask, text_type_ids, input_ids
    
    def down_stream(self, bert_out):
        # last 4 mean pooling
        hidden_stats = bert_out.hidden_states[-4:]
        hidden_stats = [i.mean(dim=1) for i in hidden_stats]    # 即每一层的每个token embedding取平均
        hidden_stats = torch.cat(hidden_stats, dim=1)
        out_pr = self.cls_privilege(hidden_stats)               # (batch, 4)
        out_av = self.cls_attack_vec(hidden_stats)              # (batch, 2)
        out_im = self.cls_impact(hidden_stats)                  # (batch, 13)
        return out_pr, out_av, out_im

    def forward(self, data, inference=False, multi=False):
        text_inputs, text_mask, text_type_ids, input_ids= self.build_pre_input(data)
        if 'main_label' in data:
            bert_out = self.bert_lm.bert(input_ids=text_inputs, attention_mask=text_mask, token_type_ids=text_type_ids)

            out_pr, out_av, out_im = self.down_stream(bert_out)

        if inference:
            if multi:
                return out_pr
            else:
                return torch.argmax(out_pr,dim=1), torch.argmax(out_av,dim=1), torch.argmax(out_im,dim=1),
        else:
            mlm_loss = self.bert_lm(input_ids=input_ids, attention_mask=text_mask, token_type_ids=text_type_ids, labels=data['labels'].cuda()).loss
            if 'main_label' not in data:
                return mlm_loss, None, None, None, None, None, None, None, None, None

            loss_pr, acc_pr, pre_pr, label_pr = self.cal_loss(out_pr, data['main_label'][:,0].cuda(), self.focalloss)
            loss_av, acc_av, pre_av, label_av = self.cal_loss(out_av, data['main_label'][:,1].cuda(), self.focalloss)
            loss_im, acc_im, pre_im, label_im = self.cal_loss(out_im, data['main_label'][:,2].cuda(), self.focalloss)
            
            if self.rdrop:
                bert_out_2 = self.bert_lm.bert(input_ids=text_inputs, attention_mask=text_mask, token_type_ids=text_type_ids)
                out_pr_2, out_av_2, out_im_2 = self.down_stream(bert_out_2)
                kl_loss_pr = self.compute_kl_loss(out_pr, out_pr_2)
                kl_loss_av = self.compute_kl_loss(out_av, out_av_2)
                kl_loss_im = self.compute_kl_loss(out_im, out_im_2)
                loss_pr_2, _, _, _ = self.cal_loss(out_pr, data['main_label'][:,0].cuda(), self.focalloss)
                loss_av_2, _, _, _ = self.cal_loss(out_av, data['main_label'][:,1].cuda(), self.focalloss)
                loss_im_2, _, _, _ = self.cal_loss(out_im, data['main_label'][:,2].cuda(), self.focalloss)
                all_loss=(loss_pr+loss_av+loss_im+loss_pr_2+loss_av_2+loss_im_2)/2 + self.rdrop_alpha * (kl_loss_pr+kl_loss_av+kl_loss_im) + mlm_loss
            else:
                all_loss = loss_pr + loss_av + loss_im + mlm_loss
            print(f"loss_pr {loss_pr} loss_av {loss_av} loss_im {loss_im} mlm_loss {mlm_loss}")
            return all_loss, acc_pr,acc_av,acc_im, pre_pr,pre_av,pre_im, label_pr,label_av,label_im

    @staticmethod
    def cal_loss(prediction, gt_label, focalloss):
        if focalloss:
            loss_func = FocalLoss(prediction.shape[-1])
            loss = loss_func(prediction, gt_label)
        else:
            loss = F.cross_entropy(prediction, gt_label)

        with torch.no_grad():
            pred_label = torch.argmax(prediction, dim=1)
            accuracy = (gt_label == pred_label).float().sum() / gt_label.shape[0]
        return loss, accuracy, pred_label, gt_label

    @staticmethod
    def compute_kl_loss(p, q, pad_mask=None):
        
        p_loss = F.kl_div(F.log_softmax(p, dim=-1), F.softmax(q, dim=-1), reduction='none')
        q_loss = F.kl_div(F.log_softmax(q, dim=-1), F.softmax(p, dim=-1), reduction='none')
        
        # pad_mask is for seq-level tasks
        if pad_mask is not None:
            p_loss.masked_fill_(pad_mask, 0.)
            q_loss.masked_fill_(pad_mask, 0.)
        
        # You can choose whether to use function "sum" and "mean" depending on your task
        p_loss = p_loss.sum()
        q_loss = q_loss.sum()

        loss = (p_loss + q_loss) / 2
        return loss
