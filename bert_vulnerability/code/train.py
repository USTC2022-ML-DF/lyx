import logging
import os
import time
import torch
from config import parse_args
from data_helper import create_dataloaders
from model import clsModel
# os.environ['CUDA_VISIBLE_DEVICES']='0,1,2,3'
from util import *
import json
from sklearn.model_selection import StratifiedKFold
from torch.cuda.amp import autocast as ac

def validate(model, val_dataloader):
    model.eval()
    acc_pres = []
    acc_aves = []
    acc_imes = []
    losses = []
    with torch.no_grad():
        for batch in val_dataloader:
            loss, acc_pr,acc_av,acc_im, _,_,_,_,_,_ = model(batch)
            loss = loss.mean()
            acc_pr = acc_pr.mean()
            acc_av = acc_av.mean()
            acc_im = acc_im.mean()
            losses.append(loss.cpu().numpy())
            acc_pres.append(acc_pr.cpu().numpy())
            acc_aves.append(acc_av.cpu().numpy())
            acc_imes.append(acc_im.cpu().numpy())
    loss = sum(losses) / len(losses)
    #results = evaluate(predictions, labels)
    results = {"acc_pr":sum(acc_pres) / len(acc_pres),"acc_av":sum(acc_aves) / len(acc_aves),"acc_im":sum(acc_imes) / len(acc_imes)}
    model.train()
    return loss, results
    
def train_and_validate(args):
    # 1. load data
    if not os.path.exists(args.savedmodel_path): 
        os.makedirs(args.savedmodel_path)
    train_dataloader, val_dataloader = create_dataloaders(args)
    # 2. build model and optimizers
    model = clsModel(args)
    optimizer, scheduler = build_optimizer(args, model)

    # if args.device == 'cuda':
    #     model = torch.nn.parallel.DataParallel(model.to(args.device))  
    model.to(args.device)
    #-------ema here-----------------
    if args.ema:
        ema = EMA(model, 0.999)
        ema.register()
    fgm, pgd = None, None
    if args.attack == 'fgm':
        fgm = FGM(model=model)
        print('fgming')
    elif args.attack == 'pgd':
        pgd = PGD(model=model)
        pgd_k = 3
        print('pgding')
    if args.use_fp16:
        scaler = torch.cuda.amp.GradScaler()
    model.train()
    loss, results = validate(model, val_dataloader)
    results = {k: round(v, 4) for k, v in results.items()}
    logging.info(f"Epoch {-1} step {-1}: loss {loss:.3f}, {results}")
    #-------------------------------
    # 3. training
    step = 0
    best_score = args.best_score
    start_time = time.time()
    num_total_steps = len(train_dataloader) * args.max_epochs
    for epoch in range(args.max_epochs):
        for i, batch in enumerate(train_dataloader):
            model.train()
            if args.use_fp16:
                with ac():
                    loss, accuracy, _, _ = model(batch)
                loss = loss.mean()
                accuracy = accuracy.mean()
                scaler.scale(loss).backward()
                scaler.unscale_(optimizer)
                scaler.step(optimizer)
                scaler.update()
            else:
                loss, _,_,_, _, _,_, _,_,_ = model(batch)
                loss = loss.mean()
                loss.backward()
            if fgm is not None:
                fgm.attack()
                if args.use_fp16:
                    with ac():
                        loss_adv, _, _, _ = model(batch)
                else:
                    loss_adv, _, _, _ = model(batch)
                loss_adv = loss_adv.mean()
                if args.use_fp16:
                    scaler.scale(loss_adv).backward()
                else:
                    loss_adv.backward()
                fgm.restore()
            elif pgd is not None:
                pgd.backup_grad()
                for _t in range(pgd_k):
                    pgd.attack(is_first_attack=(_t == 0))
                    if _t != pgd_k - 1:
                        model.zero_grad()
                    else:
                        pgd.restore_grad()
                    if args.use_fp16:
                        with ac():
                            loss_adv, _, _, _ = model(batch)
                    else:
                        loss_adv, _, _, _ = model(batch)
                    loss_adv = loss_adv.mean()
                    if args.use_fp16:
                        scaler.scale(loss_adv).backward()
                    else:
                        loss_adv.backward()
                pgd.restore()
            if args.use_fp16:
                scaler.unscale_(optimizer)
                scaler.step(optimizer)
                scaler.update()
            else:
                optimizer.step()
            model.zero_grad()
            scheduler.step()
            if args.ema:
                #------ema update--------
                ema.update()
                #------------------------
            step += 1
            if step % args.print_steps == 0:
                time_per_step = (time.time() - start_time) / max(1, step)
                remaining_time = time_per_step * (num_total_steps - step)
                remaining_time = time.strftime('%H:%M:%S', time.gmtime(remaining_time))
                logging.info(f"Epoch {epoch} step {step} eta {remaining_time}: loss {loss:.3f}")
        if args.ema:
            #--------ema shadow--------
            ema.apply_shadow()
            #--------------------------
        # 4. validation
        loss, results = validate(model, val_dataloader)
        results = {k: round(v, 4) for k, v in results.items()}
        logging.info(f"Epoch {epoch} step {step}: loss {loss:.3f}, {results}")
        # 5. save checkpoint
        # mean_f1 = results['f1_macro']
        # if mean_f1 > best_score:
        #     best_score = mean_f1
        torch.save({'epoch': epoch, 'model_state_dict': model.state_dict(), 'acc_pr': results['acc_pr'],'acc_av': results['acc_av'],
                'acc_im': results['acc_im']},f'{args.savedmodel_path}/model_epoch_{epoch}_acc_pr_{results["acc_pr"]}_acc_av_{results["acc_av"]}_acc_im_{results["acc_im"]}.bin')
        if args.ema:
            #--------ema restore-------
            ema.restore()
            #--------------------------

def main():
    args = parse_args()
    setup_logging()
    setup_device(args)
    setup_seed(args)
    os.makedirs(args.savedmodel_path, exist_ok=True)
    logging.info("Training/evaluation parameters: %s", args)
    train_and_validate(args)
if __name__ == '__main__':
    main()