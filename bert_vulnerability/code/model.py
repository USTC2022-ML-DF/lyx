# 直接 bert-base加载 roberta
# 最终特征采用 last 4 mean pooling，即取bert最后四层的特征平均池化
# 最终再接一个映射到36的分类头，即分36类
# loss部分即传统交叉熵，后续也可考虑focal loss 等
import torch
import torch.nn as nn
import torch.nn.functional as F
from transformers import BertModel

class BottleNeck(nn.Module):
    def __init__(self, in_dim, ffn_dim=None, out_dim=None, mlp_layers=2):
        super().__init__()
        ffn_dim = ffn_dim if ffn_dim is not None else in_dim * 4
        out_dim = out_dim if out_dim is not None else in_dim

        self.mlps = nn.ModuleList()
        self.mlps.append(nn.Linear(in_dim, ffn_dim))
        for _ in range(mlp_layers - 2):
            self.mlps.append(nn.Linear(ffn_dim, ffn_dim))
        self.mlps.append(nn.Linear(ffn_dim, out_dim))

        self.bns = nn.ModuleList()
        for _ in range(mlp_layers - 1):
            self.bns.append(nn.LayerNorm(ffn_dim))

        self.num_layers = mlp_layers

    def forward(self, x):
        for i in range(self.num_layers - 1):
            x = self.mlps[i](x)
            x = self.bns[i](x)
            x = F.relu(x)
        x = self.mlps[-1](x)
        return x


class clsModel(nn.Module):
    def __init__(self, args):
        super(clsModel, self).__init__()
        self.bert = BertModel.from_pretrained(args.bert_dir, output_hidden_states=True)
        self.cls_privilege = nn.Linear(768*4,4)
        self.cls_attack_vec = nn.Linear(768*4,2)
        # self.cls_impact = nn.Linear(768*4,13)
        self.cls_impact = BottleNeck(768*4, ffn_dim=768, out_dim=13, mlp_layers=3)
        self.text_embedding = self.bert.embeddings

        self.rdrop = args.rdrop
        self.rdrop_alpha = args.rdrop_alpha

    def build_pre_input(self,data):
        text_inputs = data['text_inputs']
        text_mask = data['text_mask']
        textembedding = self.text_embedding(text_inputs.cuda(), data['text_type_ids'].cuda())
        return textembedding, text_mask

    def forward(self, data, inference=False, multi=False):
        inputs_embeds, mask = self.build_pre_input(data)
        bert_out = self.bert(attention_mask=mask.cuda(), inputs_embeds=inputs_embeds)

        #last 4 mean pooling
        hidden_stats = bert_out.hidden_states[-4:]
        hidden_stats = [i.mean(dim=1) for i in hidden_stats]#即每一层的每个token embedding取平均
        hidden_stats = torch.cat(hidden_stats, dim=1)
        out_pr = self.cls_privilege(hidden_stats)   #(batch, 4)
        out_av = self.cls_attack_vec(hidden_stats)  #(batch, 2)
        out_im = self.cls_impact(hidden_stats)      #(batch, 13)

        if inference:
            if multi:
                return out_pr
            else:
                return torch.argmax(out_pr,dim=1), torch.argmax(out_av,dim=1), torch.argmax(out_im,dim=1),
        else:
            loss_pr, acc_pr, pre_pr, label_pr = self.cal_loss(out_pr, data['label'][:,0].cuda())
            loss_av, acc_av, pre_av, label_av = self.cal_loss(out_av, data['label'][:,1].cuda())
            loss_im, acc_im, pre_im, label_im = self.cal_loss(out_im, data['label'][:,2].cuda())
            if self.rdrop:
                bert_out_2 = self.bert(attention_mask=mask, inputs_embeds=inputs_embeds)
                hidden_stats_2 = bert_out_2.hidden_states[-4:]
                hidden_stats_2 = [i.mean(dim=1) for i in hidden_stats_2]#即每一层的每个token embedding取平均
                hidden_stats_2 = torch.cat(hidden_stats_2, dim=1)
                out_pr_2 = self.cls_privilege(hidden_stats_2)   #(batch,4)
                out_av_2 = self.cls_attack_vec(hidden_stats_2)  #(batch,2)
                out_im_2 = self.cls_impact(hidden_stats_2)      #(batch,13)
                kl_loss_pr = self.compute_kl_loss(out_pr, out_pr_2)
                kl_loss_av = self.compute_kl_loss(out_av, out_av_2)
                kl_loss_im = self.compute_kl_loss(out_im, out_im_2)
                loss_pr_2, _, _, _ = self.cal_loss(out_pr, data['label'][:,0].cuda())
                loss_av_2, _, _, _ = self.cal_loss(out_av, data['label'][:,1].cuda())
                loss_im_2, _, _, _ = self.cal_loss(out_im, data['label'][:,2].cuda())
                all_loss=(loss_pr+loss_av+loss_im+loss_pr_2+loss_av_2+loss_im_2)/2 + self.rdrop_alpha * (kl_loss_pr+kl_loss_av+kl_loss_im)
            else:
                all_loss = loss_pr + loss_av + loss_im
            return all_loss, acc_pr,acc_av,acc_im, pre_pr,pre_av,pre_im, label_pr,label_av,label_im

    @staticmethod
    def cal_loss(prediction, gt_label):
        # focal loss: 
        # FL(p_t) = -alpha(1 - p_t) ^ gamma * log(p_t), 
        # where p_t is the predicted probability of ground truth label
        # When gamma=0, focal loss is equivalent to cross entropy loss
        gamma = 2.0

        pred_prob = torch.softmax(prediction, dim=-1)
        target_prob = pred_prob[..., gt_label]
        loss = -torch.mean((1 - target_prob) ** gamma * torch.log(target_prob))

        with torch.no_grad():
            pred_label = torch.argmax(prediction, dim=1)
            accuracy = (gt_label == pred_label).float().sum() / gt_label.shape[0]
        return loss, accuracy, pred_label, gt_label

    @staticmethod
    def compute_kl_loss(p, q, pad_mask=None):
        
        p_loss = F.kl_div(F.log_softmax(p, dim=-1), F.softmax(q, dim=-1), reduction='none')
        q_loss = F.kl_div(F.log_softmax(q, dim=-1), F.softmax(p, dim=-1), reduction='none')
        
        # pad_mask is for seq-level tasks
        if pad_mask is not None:
            p_loss.masked_fill_(pad_mask, 0.)
            q_loss.masked_fill_(pad_mask, 0.)

        # You can choose whether to use function "sum" and "mean" depending on your task
        p_loss = p_loss.sum()
        q_loss = q_loss.sum()

        loss = (p_loss + q_loss) / 2
        return loss
