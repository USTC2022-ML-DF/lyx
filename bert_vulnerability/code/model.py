# 直接 bert-base加载 roberta
# 最终特征采用 last 4 mean pooling，即取bert最后四层的特征平均池化
# 最终再接一个映射到36的分类头，即分36类
# loss部分即传统交叉熵，后续也可考虑focal loss 等
import torch
import torch.nn as nn
import torch.nn.functional as F
from transformers import BertModel


def compute_focal_loss(prediction, gt_label):
    # focal loss: 
    # FL(p_t) = -alpha(1 - p_t) ^ gamma * log(p_t), 
    # where p_t is the predicted probability of ground truth label
    # When gamma=0, focal loss is equivalent to cross entropy loss
    gamma = 2.0

    pred_prob = torch.softmax(prediction, dim=-1)
    target_prob = pred_prob[..., gt_label]
    loss = -torch.mean((1 - target_prob) ** gamma * torch.log(target_prob))
    return loss

def compute_focal_loss_onehot(prediction, gt_label_onehot):
    # focal loss for one-hot label
    # prediction: [batch_size, num_classes]
    # gt_label: [batch_size, num_classes], in {0.0, 1.0}
    gamma = 2.0

    pred_prob = torch.softmax(prediction, dim=1)
    target_prob = (pred_prob * gt_label_onehot).sum(1)
    loss = -torch.mean((1 - target_prob) ** gamma * torch.log(target_prob))
    return loss

def compute_kl_loss(p, q, pad_mask=None):

    p_loss = F.kl_div(F.log_softmax(p, dim=-1), F.softmax(q, dim=-1), reduction='none')
    q_loss = F.kl_div(F.log_softmax(q, dim=-1), F.softmax(p, dim=-1), reduction='none')
    
    # pad_mask is for seq-level tasks
    if pad_mask is not None:
        p_loss.masked_fill_(pad_mask, 0.)
        q_loss.masked_fill_(pad_mask, 0.)

    # You can choose whether to use function "sum" and "mean" depending on your task
    p_loss = p_loss.sum()
    q_loss = q_loss.sum()

    loss = (p_loss + q_loss) / 2
    return loss

def compute_acc(pred_label, gt_label):
    accuracy = (gt_label == pred_label).float().sum() / gt_label.shape[0]
    return accuracy

def compute_acc_onehot(pred_label, gt_label_onehot):
    batch_size = gt_label_onehot.shape[0]
    accuracy = (gt_label_onehot[torch.arange(batch_size, dtype=torch.long, device=gt_label_onehot.device), pred_label] > 0.5).float().sum() / batch_size
    return accuracy

class BottleNeck(nn.Module):
    def __init__(self, in_dim, ffn_dim=None, out_dim=None, mlp_layers=2):
        super().__init__()
        ffn_dim = ffn_dim if ffn_dim is not None else in_dim * 4
        out_dim = out_dim if out_dim is not None else in_dim

        self.mlps = nn.ModuleList()
        self.mlps.append(nn.Linear(in_dim, ffn_dim))
        for _ in range(mlp_layers - 2):
            self.mlps.append(nn.Linear(ffn_dim, ffn_dim))
        self.mlps.append(nn.Linear(ffn_dim, out_dim))

        self.bns = nn.ModuleList()
        for _ in range(mlp_layers - 1):
            self.bns.append(nn.LayerNorm(ffn_dim))

        self.num_layers = mlp_layers

    def forward(self, x):
        for i in range(self.num_layers - 1):
            x = self.mlps[i](x)
            x = self.bns[i](x)
            x = F.relu(x)
        x = self.mlps[-1](x)
        return x


class clsModel(nn.Module):
    def __init__(self, args):
        super(clsModel, self).__init__()
        self.bert = BertModel.from_pretrained(args.bert_dir, output_hidden_states=True)
        self.cls_privilege = nn.Linear(768 * 4, 4)
        self.cls_attack_vec = nn.Linear(768 * 4 ,2)
        self.cls_impact = nn.Linear(768 * 4, 13)
        # self.cls_impact = nn.Sequential(
        #     nn.Linear(768 * 4 , 13),
        #     nn.Tanh(),
        #     nn.Linear(768, 13)
        # )
        #self.text_embedding = self.bert.embeddings

        self.rdrop = args.rdrop
        self.rdrop_alpha = args.rdrop_alpha

    def down_stream(self, bert_out):
        # last 4 mean pooling
        hidden_stats = bert_out.hidden_states[-4:]
        hidden_stats = [i[:, -1, :] for i in hidden_stats]      # list of [batch_size, 768]
        hidden_stats = torch.cat(hidden_stats, dim=1)
        out_pr = self.cls_privilege(hidden_stats)               # (batch, 4)
        out_av = self.cls_attack_vec(hidden_stats)              # (batch, 2)
        out_im = self.cls_impact(hidden_stats)                  # (batch, 13)
        return out_pr, out_av, out_im

    def forward(self, data, inference=False):
        input_ids, attention_mask = data['input_ids'].cuda(), data['attention_mask'].cuda()
        bert_out = self.bert(input_ids=input_ids, attention_mask=attention_mask)

        out_pr, out_av, out_im = self.down_stream(bert_out)
        
        pre_label_pr, pre_label_av, pre_lable_im = torch.argmax(out_pr, dim=1), torch.argmax(out_av, dim=1), torch.argmax(out_im, dim=1)

        if inference:
            return pre_label_pr, pre_label_av, pre_lable_im

        gt_label_pr, gt_label_av, gt_label_im = data['labels']['privilege-required'].cuda(), data['labels']['attack-vector'].cuda(), data['labels']['impact'].cuda()
        acc_pr, acc_av, acc_im = compute_acc_onehot(pre_label_pr, gt_label_pr), compute_acc_onehot(pre_label_av, gt_label_av), compute_acc_onehot(pre_lable_im, gt_label_im)

        loss_pr, loss_av, loss_im = compute_focal_loss_onehot(out_pr, gt_label_pr), compute_focal_loss_onehot(out_av, gt_label_av), compute_focal_loss_onehot(out_im, gt_label_im)
        all_loss = loss_pr + loss_av + loss_im

        if self.rdrop:
            bert_out_2 = self.bert(input_ids=input_ids, attention_mask=attention_mask)
            out_pr_2, out_av_2, out_im_2 = self.down_stream(bert_out_2)
            loss_pr_2, loss_av_2, loss_im_2 = compute_focal_loss(out_pr, gt_label_pr), compute_focal_loss(out_av, gt_label_av), compute_focal_loss(out_im, gt_label_im)

            kl_loss_pr, kl_loss_av, kl_loss_im = compute_kl_loss(out_pr, out_pr_2), compute_kl_loss(out_av, out_av_2), compute_kl_loss(out_im, out_im_2)

            all_loss = (all_loss + loss_pr_2 + loss_av_2 + loss_im_2) / 2 + self.rdrop_alpha * (kl_loss_pr + kl_loss_av + kl_loss_im)
        
        return all_loss, (acc_pr, acc_av, acc_im), (pre_label_pr, pre_label_av, pre_lable_im), (gt_label_pr, gt_label_av, gt_label_im)

